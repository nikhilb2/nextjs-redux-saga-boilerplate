{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport jsCookie from 'js-cookie';\nexport const login = details => {\n  jsCookie.set('user', JSON.stringify(details)); //  jsCookie.set('jwt', JSON.stringify(details.jwt))\n};\n/*\nexport const storeTeams = (teams) => {\n  jsCookie.set('teams', JSON.stringify(teams))\n}\n\nexport const restoreTeams = () => {\n  const teams = jsCookie.get('teams')\n  return teams ? JSON.parse(teams) : null\n}\n\n*/\n\nexport const currentSession = () => {\n  const user = jsCookie.get('user');\n  return user ? JSON.parse(user) : null;\n};\nexport const logout = () => {\n  jsCookie.remove('user');\n  jsCookie.remove('jwt');\n  jsCookie.remove('teams');\n  jsCookie.remove('teamArray');\n};\nexport const updateUserData = data => {\n  const newData = _objectSpread(_objectSpread({}, currentSession()), data);\n\n  const userData = JSON.stringify(newData);\n  jsCookie.set('user', userData);\n  return userData;\n};\nexport const removeCode = async () => {\n  const session = await currentSession();\n\n  if (session && session.user) {\n    delete session.user.code;\n  }\n\n  const userData = JSON.stringify(session);\n  jsCookie.set('user', JSON.stringify(userData));\n  return session;\n};\n/*\nexport const addToTeamArray = (team) => {\n  const prevTeams = restoreTeamArray()\n  if (team) {\n    prevTeams[team.teamId] = team\n  }\n  jsCookie.set('teamArray', JSON.stringify(prevTeams))\n}\n\nexport const restoreTeamArray = () => {\n  const teams = jsCookie.get('teamArray')\n  return teams ? JSON.parse(teams) : {}\n}\n\nexport const addToPeopleArray = (user) => {\n  const prevUsers = restorePeopleArray()\n  if (user) {\n    prevUsers[user.userid] = user\n  }\n  jsCookie.set('peopleArray', JSON.stringify(prevUsers))\n}\n\nexport const restorePeopleArray = () => {\n  const people = jsCookie.get('peopleArray')\n  return people ? JSON.parse(people) : {}\n}\n*/","map":{"version":3,"sources":["/Users/nikhilbhatia/Documents/projects/nextRedux/redux/auth/UserSession.ts"],"names":["jsCookie","login","details","set","JSON","stringify","currentSession","user","get","parse","logout","remove","updateUserData","data","newData","userData","removeCode","session","code"],"mappings":";;;;;;AAAA,OAAOA,QAAP,MAAqB,WAArB;AAOA,OAAO,MAAMC,KAAK,GAAIC,OAAD,IAAsB;AACzCF,EAAAA,QAAQ,CAACG,GAAT,CAAa,MAAb,EAAqBC,IAAI,CAACC,SAAL,CAAeH,OAAf,CAArB,EADyC,CAEzC;AACD,CAHM;AAIP;;;;;;;;;;;;AAYA,OAAO,MAAMI,cAAc,GAAG,MAAM;AAClC,QAAMC,IAAI,GAAGP,QAAQ,CAACQ,GAAT,CAAa,MAAb,CAAb;AACA,SAAOD,IAAI,GAAGH,IAAI,CAACK,KAAL,CAAWF,IAAX,CAAH,GAAsB,IAAjC;AACD,CAHM;AAKP,OAAO,MAAMG,MAAM,GAAG,MAAM;AAC1BV,EAAAA,QAAQ,CAACW,MAAT,CAAgB,MAAhB;AACAX,EAAAA,QAAQ,CAACW,MAAT,CAAgB,KAAhB;AACAX,EAAAA,QAAQ,CAACW,MAAT,CAAgB,OAAhB;AACAX,EAAAA,QAAQ,CAACW,MAAT,CAAgB,WAAhB;AACD,CALM;AAOP,OAAO,MAAMC,cAAc,GAAIC,IAAD,IAAe;AAC3C,QAAMC,OAAO,mCAAQR,cAAc,EAAtB,GAA6BO,IAA7B,CAAb;;AACA,QAAME,QAAQ,GAAGX,IAAI,CAACC,SAAL,CAAeS,OAAf,CAAjB;AACAd,EAAAA,QAAQ,CAACG,GAAT,CAAa,MAAb,EAAqBY,QAArB;AACA,SAAOA,QAAP;AACD,CALM;AAOP,OAAO,MAAMC,UAAU,GAAG,YAAqC;AAC7D,QAAMC,OAAO,GAAG,MAAMX,cAAc,EAApC;;AACA,MAAIW,OAAO,IAAIA,OAAO,CAACV,IAAvB,EAA6B;AAC3B,WAAOU,OAAO,CAACV,IAAR,CAAaW,IAApB;AACD;;AACD,QAAMH,QAAQ,GAAGX,IAAI,CAACC,SAAL,CAAeY,OAAf,CAAjB;AACAjB,EAAAA,QAAQ,CAACG,GAAT,CAAa,MAAb,EAAqBC,IAAI,CAACC,SAAL,CAAeU,QAAf,CAArB;AAEA,SAAOE,OAAP;AACD,CATM;AAUP","sourcesContent":["import jsCookie from 'js-cookie'\nimport { User } from 'apiTypes'\n\nexport interface Session {\n  user: User\n  jwt: string\n}\nexport const login = (details: Session) => {\n  jsCookie.set('user', JSON.stringify(details))\n  //  jsCookie.set('jwt', JSON.stringify(details.jwt))\n}\n/*\nexport const storeTeams = (teams) => {\n  jsCookie.set('teams', JSON.stringify(teams))\n}\n\nexport const restoreTeams = () => {\n  const teams = jsCookie.get('teams')\n  return teams ? JSON.parse(teams) : null\n}\n\n*/\n\nexport const currentSession = () => {\n  const user = jsCookie.get('user')\n  return user ? JSON.parse(user) : null\n}\n\nexport const logout = () => {\n  jsCookie.remove('user')\n  jsCookie.remove('jwt')\n  jsCookie.remove('teams')\n  jsCookie.remove('teamArray')\n}\n\nexport const updateUserData = (data: any) => {\n  const newData = { ...currentSession(), ...data }\n  const userData = JSON.stringify(newData)\n  jsCookie.set('user', userData)\n  return userData\n}\n\nexport const removeCode = async (): Promise<Session | null> => {\n  const session = await currentSession()\n  if (session && session.user) {\n    delete session.user.code\n  }\n  const userData = JSON.stringify(session)\n  jsCookie.set('user', JSON.stringify(userData))\n\n  return session\n}\n/*\nexport const addToTeamArray = (team) => {\n  const prevTeams = restoreTeamArray()\n  if (team) {\n    prevTeams[team.teamId] = team\n  }\n  jsCookie.set('teamArray', JSON.stringify(prevTeams))\n}\n\nexport const restoreTeamArray = () => {\n  const teams = jsCookie.get('teamArray')\n  return teams ? JSON.parse(teams) : {}\n}\n\nexport const addToPeopleArray = (user) => {\n  const prevUsers = restorePeopleArray()\n  if (user) {\n    prevUsers[user.userid] = user\n  }\n  jsCookie.set('peopleArray', JSON.stringify(prevUsers))\n}\n\nexport const restorePeopleArray = () => {\n  const people = jsCookie.get('peopleArray')\n  return people ? JSON.parse(people) : {}\n}\n*/\n"]},"metadata":{},"sourceType":"module"}