{"ast":null,"code":"var _jsxFileName = \"/Users/nikhilbhatia/Documents/projects/nextRedux/pages/index.tsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport Link from \"next/link\";\nimport { connect } from \"react-redux\";\n\nclass Index extends React.Component {\n  // note that since _app is wrapped no need to wrap page\n  static async getInitialProps({\n    store,\n    pathname,\n    query,\n    req\n  }) {\n    console.log(\"2. Page.getInitialProps uses the store to dispatch things\", {\n      pathname,\n      query\n    });\n\n    if (req) {\n      // All async actions must be await'ed\n      await store.dispatch({\n        type: \"PAGE\",\n        payload: \"server\"\n      }); // Some custom thing for this particular page\n\n      return {\n        pageProp: \"server\"\n      };\n    } // await is not needed if action is synchronous\n\n\n    store.dispatch({\n      type: \"PAGE\",\n      payload: \"client\"\n    }); // Some custom thing for this particular page\n\n    return {\n      pageProp: \"client\"\n    };\n  }\n\n  render() {\n    // console.log('5. Page.render');\n    const {\n      pageProp,\n      appProp,\n      app,\n      page\n    } = this.props;\n    return __jsx(\"div\", {\n      className: \"index\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 7\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }\n    }, \"Try to navigate to another page and return back here to see how\", \" \", __jsx(\"code\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }\n    }, \"getInitialProps\"), \" will be used on client side.\"), __jsx(\"pre\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }\n    }, JSON.stringify({\n      pageProp,\n      appProp,\n      app,\n      page\n    }, null, 2)), __jsx(Link, {\n      href: \"/server\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }\n    }, \"Navigate\")), \" | \", __jsx(Link, {\n      href: \"/static\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }\n    }, \"Navigate to static\")), \" | \", __jsx(Link, {\n      href: \"/error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }\n    }, \"Navigate to error\")));\n  }\n\n}\n\nexport default connect(state => state)(Index);","map":{"version":3,"sources":["/Users/nikhilbhatia/Documents/projects/nextRedux/pages/index.tsx"],"names":["React","Link","connect","Index","Component","getInitialProps","store","pathname","query","req","console","log","dispatch","type","payload","pageProp","render","appProp","app","page","props","JSON","stringify","state"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,OAAT,QAAwB,aAAxB;;AASA,MAAMC,KAAN,SAAoBH,KAAK,CAACI,SAA1B,CAA+C;AAC7C;AACA,eAAoBC,eAApB,CAAoC;AAClCC,IAAAA,KADkC;AAElCC,IAAAA,QAFkC;AAGlCC,IAAAA,KAHkC;AAIlCC,IAAAA;AAJkC,GAApC,EAK2B;AACzBC,IAAAA,OAAO,CAACC,GAAR,CAAY,2DAAZ,EAAyE;AACvEJ,MAAAA,QADuE;AAEvEC,MAAAA;AAFuE,KAAzE;;AAKA,QAAIC,GAAJ,EAAS;AACP;AACA,YAAMH,KAAK,CAACM,QAAN,CAAe;AAAEC,QAAAA,IAAI,EAAE,MAAR;AAAgBC,QAAAA,OAAO,EAAE;AAAzB,OAAf,CAAN,CAFO,CAIP;;AACA,aAAO;AAAEC,QAAAA,QAAQ,EAAE;AAAZ,OAAP;AACD,KAZwB,CAczB;;;AACAT,IAAAA,KAAK,CAACM,QAAN,CAAe;AAAEC,MAAAA,IAAI,EAAE,MAAR;AAAgBC,MAAAA,OAAO,EAAE;AAAzB,KAAf,EAfyB,CAiBzB;;AACA,WAAO;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAAP;AACD;;AAEMC,EAAAA,MAAP,GAAgB;AACd;AACA,UAAM;AAAED,MAAAA,QAAF;AAAYE,MAAAA,OAAZ;AAAqBC,MAAAA,GAArB;AAA0BC,MAAAA;AAA1B,QAAmC,KAAKC,KAA9C;AACA,WACE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0EACkE,GADlE,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAFF,kCADF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAMC,IAAI,CAACC,SAAL,CAAe;AAAEP,MAAAA,QAAF;AAAYE,MAAAA,OAAZ;AAAqBC,MAAAA,GAArB;AAA0BC,MAAAA;AAA1B,KAAf,EAAiD,IAAjD,EAAuD,CAAvD,CAAN,CANF,EAQE,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,CARF,EAWG,KAXH,EAYE,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADF,CAZF,EAeG,KAfH,EAgBE,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,CAhBF,CADF;AAsBD;;AArD4C;;AAwD/C,eAAejB,OAAO,CAACqB,KAAK,IAAIA,KAAV,CAAP,CAAwBpB,KAAxB,CAAf","sourcesContent":["import React from \"react\";\nimport Link from \"next/link\";\nimport { connect } from \"react-redux\";\nimport { NextPageContext } from \"next\";\nimport { State } from \"../components/reducer\";\n\nexport interface PageProps extends State {\n  pageProp: string;\n  appProp: string;\n}\n\nclass Index extends React.Component<PageProps> {\n  // note that since _app is wrapped no need to wrap page\n  public static async getInitialProps({\n    store,\n    pathname,\n    query,\n    req\n  }: NextPageContext<State>) {\n    console.log(\"2. Page.getInitialProps uses the store to dispatch things\", {\n      pathname,\n      query\n    });\n\n    if (req) {\n      // All async actions must be await'ed\n      await store.dispatch({ type: \"PAGE\", payload: \"server\" });\n\n      // Some custom thing for this particular page\n      return { pageProp: \"server\" };\n    }\n\n    // await is not needed if action is synchronous\n    store.dispatch({ type: \"PAGE\", payload: \"client\" });\n\n    // Some custom thing for this particular page\n    return { pageProp: \"client\" };\n  }\n\n  public render() {\n    // console.log('5. Page.render');\n    const { pageProp, appProp, app, page } = this.props;\n    return (\n      <div className=\"index\">\n        <p>\n          Try to navigate to another page and return back here to see how{\" \"}\n          <code>getInitialProps</code> will be used on client side.\n        </p>\n\n        <pre>{JSON.stringify({ pageProp, appProp, app, page }, null, 2)}</pre>\n\n        <Link href=\"/server\">\n          <a>Navigate</a>\n        </Link>\n        {\" | \"}\n        <Link href=\"/static\">\n          <a>Navigate to static</a>\n        </Link>\n        {\" | \"}\n        <Link href=\"/error\">\n          <a>Navigate to error</a>\n        </Link>\n      </div>\n    );\n  }\n}\n\nexport default connect(state => state)(Index);\n"]},"metadata":{},"sourceType":"module"}