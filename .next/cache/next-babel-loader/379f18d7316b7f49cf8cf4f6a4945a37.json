{"ast":null,"code":"import { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport logger from \"redux-logger\";\nimport { createWrapper } from \"next-redux-wrapper\";\nimport createSagaMiddleware from 'redux-saga';\nimport authReducer from '../redux/auth/reducer';\nimport authSaga from '../redux/auth/saga';\nconst appReducer = combineReducers({\n  authReducer\n});\n\nconst makeStore = context => {\n  // 1: Create the middleware\n  const sagaMiddleware = createSagaMiddleware(); // 2: Add an extra parameter for applying middleware:\n\n  const store = createStore(appReducer, applyMiddleware(sagaMiddleware, logger)); // 3: Run your sagas on server\n\n  store.sagaTask = sagaMiddleware.run(authSaga); // 4: now return the store:\n\n  return store;\n};\n\nexport const wrapper = createWrapper(makeStore);","map":{"version":3,"sources":["/Users/nikhilbhatia/Documents/projects/nextRedux/components/store.tsx"],"names":["createStore","applyMiddleware","combineReducers","logger","createWrapper","createSagaMiddleware","authReducer","authSaga","appReducer","makeStore","context","sagaMiddleware","store","sagaTask","run","wrapper"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAA8CC,eAA9C,QAAqE,OAArE;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,SAAoBC,aAApB,QAAkD,oBAAlD;AAEA,OAAOC,oBAAP,MAAyC,YAAzC;AACA,OAAOC,WAAP,MAAwB,uBAAxB;AACA,OAAOC,QAAP,MAAqB,oBAArB;AAGA,MAAMC,UAAU,GAAGN,eAAe,CAAC;AAEjCI,EAAAA;AAFiC,CAAD,CAAlC;;AAWA,MAAMG,SAA+B,GAAIC,OAAD,IAAsB;AAC5D;AACA,QAAMC,cAAc,GAAGN,oBAAoB,EAA3C,CAF4D,CAI5D;;AACA,QAAMO,KAAK,GAAGZ,WAAW,CAACQ,UAAD,EAAaP,eAAe,CAACU,cAAD,EAAiBR,MAAjB,CAA5B,CAAzB,CAL4D,CAO5D;;AACCS,EAAAA,KAAD,CAAqBC,QAArB,GAAgCF,cAAc,CAACG,GAAf,CAAmBP,QAAnB,CAAhC,CAR4D,CAU5D;;AACA,SAAOK,KAAP;AACD,CAZD;;AAcA,OAAO,MAAMG,OAAO,GAAGX,aAAa,CAACK,SAAD,CAA7B","sourcesContent":["import { createStore, applyMiddleware, Store, combineReducers } from \"redux\";\nimport logger from \"redux-logger\";\nimport { MakeStore, createWrapper, Context } from \"next-redux-wrapper\";\nimport { reducer, State } from \"./reducer\";\nimport createSagaMiddleware, {Task} from 'redux-saga';\nimport authReducer from '../redux/auth/reducer'\nimport authSaga from '../redux/auth/saga'\n\n\nconst appReducer = combineReducers({\n  \n  authReducer,\n})\n\n\nexport interface SagaStore extends Store {\n  sagaTask: Task;\n}\nexport type RootState = ReturnType<typeof appReducer>\n\nconst makeStore: MakeStore<RootState> = (context: Context) => {\n  // 1: Create the middleware\n  const sagaMiddleware = createSagaMiddleware();\n\n  // 2: Add an extra parameter for applying middleware:\n  const store = createStore(appReducer, applyMiddleware(sagaMiddleware, logger));\n\n  // 3: Run your sagas on server\n  (store as SagaStore).sagaTask = sagaMiddleware.run(authSaga);\n\n  // 4: now return the store:\n  return store;\n};\n\nexport const wrapper = createWrapper(makeStore);"]},"metadata":{},"sourceType":"module"}