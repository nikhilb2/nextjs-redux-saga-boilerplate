{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { currentSession } from './auth/UserSession';\nvar API_ROOT = 'http://192.168.178.21:8080';\nvar env = 'dev'; //env = 'prod'\n//API_ROOT = env === 'dev' ? 'https://tfbackdev.herokuapp.com'  :'https://tfback.herokuapp.com'\n\nexport var IMAGE_API_ROOT = 'http://images.teamfeedback.app/api/';\nvar IMAGE_UPLOAD_API_ROOT = \"https://images.teamfeedback.app/api/upload.php\"; //comment\n\nexport var currentApi = API_ROOT === 'https://tfback.herokuapp.com' ? 'Heroku' : 'Local';\n\nvar request = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url, method, body, addauth, headers) {\n    var decoratedOptions, session, decoratedUrl, response, json, _json, apierror, _apierror;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            decoratedOptions = {\n              method: method,\n              headers: Object.assign({}, headers),\n              body: (method === 'POST' || method === 'PUT' || method === 'DELETE') && body ? JSON.stringify(body) : undefined\n            };\n            decoratedOptions.headers.Accept = '*/*';\n            decoratedOptions.headers['Content-Type'] = 'application/json';\n            decoratedOptions.headers['accept-encoding'] = 'gzip, deflate';\n            session = currentSession();\n            decoratedUrl = url;\n\n            if (addauth && (session === null || session === void 0 ? void 0 : session.jwt)) {\n              decoratedOptions.headers.Authorization = 'Bearer ' + (session === null || session === void 0 ? void 0 : session.jwt);\n            }\n\n            _context.prev = 7;\n            _context.next = 10;\n            return fetch(\"\".concat(API_ROOT).concat(decoratedUrl), decoratedOptions);\n\n          case 10:\n            response = _context.sent;\n\n            if (!(response.status === 200)) {\n              _context.next = 18;\n              break;\n            }\n\n            _context.next = 14;\n            return response.json();\n\n          case 14:\n            json = _context.sent;\n            return _context.abrupt(\"return\", {\n              success: true,\n              data: json\n            });\n\n          case 18:\n            _context.next = 20;\n            return response.json();\n\n          case 20:\n            _json = _context.sent;\n            apierror = {\n              message: _json.err,\n              status: response.status\n            };\n            return _context.abrupt(\"return\", {\n              success: false,\n              message: apierror.message\n            });\n\n          case 23:\n            _context.next = 30;\n            break;\n\n          case 25:\n            _context.prev = 25;\n            _context.t0 = _context[\"catch\"](7);\n            console.log(_context.t0);\n            _apierror = {\n              status: 0,\n              message: _context.t0.toString()\n            };\n            return _context.abrupt(\"return\", {\n              success: false,\n              message: _apierror.message\n            });\n\n          case 30:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[7, 25]]);\n  }));\n\n  return function request(_x, _x2, _x3, _x4, _x5) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport var requestUploadImage = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(formData) {\n    var options, response, json, apierror;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            //console.log(formData)\n            options = {\n              method: 'POST',\n              body: formData,\n              header: {\n                //'Content-Type': 'application/json'\n                Accept: 'application/json',\n                'Content-Type': 'multipart/form-data'\n              }\n            };\n            _context2.prev = 1;\n            _context2.next = 4;\n            return fetch(IMAGE_UPLOAD_API_ROOT, options);\n\n          case 4:\n            response = _context2.sent;\n            _context2.next = 7;\n            return response.json();\n\n          case 7:\n            json = _context2.sent;\n\n            if (!(response.status === 200)) {\n              _context2.next = 12;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", {\n              success: true,\n              data: json\n            });\n\n          case 12:\n            apierror = {\n              message: json.error,\n              status: response.status\n            };\n            return _context2.abrupt(\"return\", {\n              success: false,\n              message: apierror\n            });\n\n          case 14:\n            _context2.next = 19;\n            break;\n\n          case 16:\n            _context2.prev = 16;\n            _context2.t0 = _context2[\"catch\"](1);\n            return _context2.abrupt(\"return\", {\n              success: false,\n              message: _context2.t0\n            });\n\n          case 19:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[1, 16]]);\n  }));\n\n  return function requestUploadImage(_x6) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport default request;","map":{"version":3,"sources":["/Users/nikhilbhatia/Documents/projects/nextRedux/redux/request.ts"],"names":["currentSession","API_ROOT","env","IMAGE_API_ROOT","IMAGE_UPLOAD_API_ROOT","currentApi","request","url","method","body","addauth","headers","decoratedOptions","Object","assign","JSON","stringify","undefined","Accept","session","decoratedUrl","jwt","Authorization","fetch","response","status","json","success","data","apierror","message","err","console","log","toString","requestUploadImage","formData","options","header","error"],"mappings":"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","sourcesContent":["import { currentSession } from './auth/UserSession'\n\nlet API_ROOT = 'http://192.168.178.21:8080'\nlet env = 'dev'\n//env = 'prod'\n//API_ROOT = env === 'dev' ? 'https://tfbackdev.herokuapp.com'  :'https://tfback.herokuapp.com'\nexport const IMAGE_API_ROOT = 'http://images.teamfeedback.app/api/'\nconst IMAGE_UPLOAD_API_ROOT = `https://images.teamfeedback.app/api/upload.php`\n//comment\nexport const currentApi =\n  API_ROOT === 'https://tfback.herokuapp.com' ? 'Heroku' : 'Local'\nexport interface APIError {\n  message: string\n  status: number\n}\n\ntype Headers = Record<string, string> | undefined\n\ntype BodyType = unknown\n\nexport type RequestReturn =\n  | { success: true; data: BodyType }\n  | { success: false; message: string }\n\nexport type RequestSuccess<T> = { success: true; data: T }\nexport type RequestFail = { success: false; message: string }\nexport type RequestReturnParam<T> = RequestSuccess<T> | RequestFail\n\nconst request = async (\n  url: string,\n  method: 'POST' | 'PUT' | 'GET' | 'DELETE',\n  body: BodyType | undefined | null,\n  addauth?: boolean,\n  headers?: Headers | null\n): Promise<RequestReturn> => {\n  const decoratedOptions = {\n    method,\n    headers: Object.assign({}, headers),\n    body:\n      (method === 'POST' || method === 'PUT' || method === 'DELETE') && body\n        ? JSON.stringify(body)\n        : undefined,\n  }\n  decoratedOptions.headers.Accept = '*/*'\n  decoratedOptions.headers['Content-Type'] = 'application/json'\n  decoratedOptions.headers['accept-encoding'] = 'gzip, deflate'\n  const session = currentSession()\n  let decoratedUrl = url\n  if (addauth && session?.jwt) {\n    decoratedOptions.headers.Authorization = 'Bearer ' + session?.jwt\n  }\n  try {\n    const response = await fetch(`${API_ROOT}${decoratedUrl}`, decoratedOptions)\n    if (response.status === 200) {\n      const json = await response.json()\n      return { success: true, data: json }\n    } else {\n      const json = await response.json()\n      const apierror: APIError = {\n        message: json.err,\n        status: response.status,\n      }\n      return { success: false, message: apierror.message }\n    }\n  } catch (err) {\n    console.log(err)\n\n    const apierror: APIError = {\n      status: 0,\n      message: err.toString(),\n    }\n    return { success: false, message: apierror.message }\n  }\n}\n\nexport const requestUploadImage = async (formData: any): Promise<any> => {\n  //console.log(formData)\n  const options = {\n    method: 'POST',\n    body: formData,\n    header: {\n      //'Content-Type': 'application/json'\n      Accept: 'application/json',\n      'Content-Type': 'multipart/form-data',\n    },\n  }\n  try {\n    const response = await fetch(IMAGE_UPLOAD_API_ROOT, options)\n    const json = await response.json()\n    if (response.status === 200) {\n      return { success: true, data: json }\n    } else {\n      const apierror: APIError = {\n        message: json.error,\n        status: response.status,\n      }\n      return { success: false, message: apierror }\n    }\n  } catch (err) {\n    return { success: false, message: err }\n  }\n}\n\nexport default request\n"]},"metadata":{},"sourceType":"module"}