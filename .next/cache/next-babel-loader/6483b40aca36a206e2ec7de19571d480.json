{"ast":null,"code":"import { currentSession } from './auth/UserSession';\nlet API_ROOT = 'http://192.168.178.21:8080';\nlet env = 'dev'; //env = 'prod'\n//API_ROOT = env === 'dev' ? 'https://tfbackdev.herokuapp.com'  :'https://tfback.herokuapp.com'\n\nexport const IMAGE_API_ROOT = 'http://images.teamfeedback.app/api/';\nconst IMAGE_UPLOAD_API_ROOT = `https://images.teamfeedback.app/api/upload.php`; //comment\n\nexport const currentApi = API_ROOT === 'https://tfback.herokuapp.com' ? 'Heroku' : 'Local';\n\nconst request = async (url, method, body, addauth, headers) => {\n  const decoratedOptions = {\n    method,\n    headers: Object.assign({}, headers),\n    body: (method === 'POST' || method === 'PUT' || method === 'DELETE') && body ? JSON.stringify(body) : undefined\n  };\n  decoratedOptions.headers.Accept = '*/*';\n  decoratedOptions.headers['Content-Type'] = 'application/json';\n  decoratedOptions.headers['accept-encoding'] = 'gzip, deflate';\n  const session = currentSession();\n  let decoratedUrl = url;\n\n  if (addauth && (session === null || session === void 0 ? void 0 : session.jwt)) {\n    decoratedOptions.headers.Authorization = 'Bearer ' + (session === null || session === void 0 ? void 0 : session.jwt);\n  }\n\n  try {\n    const response = await fetch(`${API_ROOT}${decoratedUrl}`, decoratedOptions);\n\n    if (response.status === 200) {\n      const json = await response.json();\n      return {\n        success: true,\n        data: json\n      };\n    } else {\n      const json = await response.json();\n      const apierror = {\n        message: json.err,\n        status: response.status\n      };\n      return {\n        success: false,\n        message: apierror.message\n      };\n    }\n  } catch (err) {\n    console.log(err);\n    const apierror = {\n      status: 0,\n      message: err.toString()\n    };\n    return {\n      success: false,\n      message: apierror.message\n    };\n  }\n};\n\nexport const requestUploadImage = async formData => {\n  //console.log(formData)\n  const options = {\n    method: 'POST',\n    body: formData,\n    header: {\n      //'Content-Type': 'application/json'\n      Accept: 'application/json',\n      'Content-Type': 'multipart/form-data'\n    }\n  };\n\n  try {\n    const response = await fetch(IMAGE_UPLOAD_API_ROOT, options);\n    const json = await response.json();\n\n    if (response.status === 200) {\n      return {\n        success: true,\n        data: json\n      };\n    } else {\n      const apierror = {\n        message: json.error,\n        status: response.status\n      };\n      return {\n        success: false,\n        message: apierror\n      };\n    }\n  } catch (err) {\n    return {\n      success: false,\n      message: err\n    };\n  }\n};\nexport default request;","map":{"version":3,"sources":["/Users/nikhilbhatia/Documents/projects/nextRedux/redux/request.ts"],"names":["currentSession","API_ROOT","env","IMAGE_API_ROOT","IMAGE_UPLOAD_API_ROOT","currentApi","request","url","method","body","addauth","headers","decoratedOptions","Object","assign","JSON","stringify","undefined","Accept","session","decoratedUrl","jwt","Authorization","response","fetch","status","json","success","data","apierror","message","err","console","log","toString","requestUploadImage","formData","options","header","error"],"mappings":"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","sourcesContent":["import { currentSession } from './auth/UserSession'\n\nlet API_ROOT = 'http://192.168.178.21:8080'\nlet env = 'dev'\n//env = 'prod'\n//API_ROOT = env === 'dev' ? 'https://tfbackdev.herokuapp.com'  :'https://tfback.herokuapp.com'\nexport const IMAGE_API_ROOT = 'http://images.teamfeedback.app/api/'\nconst IMAGE_UPLOAD_API_ROOT = `https://images.teamfeedback.app/api/upload.php`\n//comment\nexport const currentApi =\n  API_ROOT === 'https://tfback.herokuapp.com' ? 'Heroku' : 'Local'\nexport interface APIError {\n  message: string\n  status: number\n}\n\ntype Headers = Record<string, string> | undefined\n\ntype BodyType = unknown\n\nexport type RequestReturn =\n  | { success: true; data: BodyType }\n  | { success: false; message: string }\n\nexport type RequestSuccess<T> = { success: true; data: T }\nexport type RequestFail = { success: false; message: string }\nexport type RequestReturnParam<T> = RequestSuccess<T> | RequestFail\n\nconst request = async (\n  url: string,\n  method: 'POST' | 'PUT' | 'GET' | 'DELETE',\n  body: BodyType | undefined | null,\n  addauth?: boolean,\n  headers?: Headers | null\n): Promise<RequestReturn> => {\n  const decoratedOptions = {\n    method,\n    headers: Object.assign({}, headers),\n    body:\n      (method === 'POST' || method === 'PUT' || method === 'DELETE') && body\n        ? JSON.stringify(body)\n        : undefined,\n  }\n  decoratedOptions.headers.Accept = '*/*'\n  decoratedOptions.headers['Content-Type'] = 'application/json'\n  decoratedOptions.headers['accept-encoding'] = 'gzip, deflate'\n  const session = currentSession()\n  let decoratedUrl = url\n  if (addauth && session?.jwt) {\n    decoratedOptions.headers.Authorization = 'Bearer ' + session?.jwt\n  }\n  try {\n    const response = await fetch(`${API_ROOT}${decoratedUrl}`, decoratedOptions)\n    if (response.status === 200) {\n      const json = await response.json()\n      return { success: true, data: json }\n    } else {\n      const json = await response.json()\n      const apierror: APIError = {\n        message: json.err,\n        status: response.status,\n      }\n      return { success: false, message: apierror.message }\n    }\n  } catch (err) {\n    console.log(err)\n\n    const apierror: APIError = {\n      status: 0,\n      message: err.toString(),\n    }\n    return { success: false, message: apierror.message }\n  }\n}\n\nexport const requestUploadImage = async (formData: any): Promise<any> => {\n  //console.log(formData)\n  const options = {\n    method: 'POST',\n    body: formData,\n    header: {\n      //'Content-Type': 'application/json'\n      Accept: 'application/json',\n      'Content-Type': 'multipart/form-data',\n    },\n  }\n  try {\n    const response = await fetch(IMAGE_UPLOAD_API_ROOT, options)\n    const json = await response.json()\n    if (response.status === 200) {\n      return { success: true, data: json }\n    } else {\n      const apierror: APIError = {\n        message: json.error,\n        status: response.status,\n      }\n      return { success: false, message: apierror }\n    }\n  } catch (err) {\n    return { success: false, message: err }\n  }\n}\n\nexport default request\n"]},"metadata":{},"sourceType":"module"}