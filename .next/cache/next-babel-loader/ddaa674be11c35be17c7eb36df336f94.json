{"ast":null,"code":"import { actions } from './constants';\nimport { signinsuccess, signinfailed, restoreSessionSuccess, logoutDone } from './actions';\nimport { call, put, all, takeLatest } from 'redux-saga/effects';\nimport request from '../request';\nimport { login, logout, currentSession } from './UserSession';\nconst {\n  SIGNIN,\n  RESTORE_SESSION,\n  LOGOUT\n} = actions;\n\nfunction* requestSignin(action) {\n  const credentials = {\n    email: action.data.email.toLowerCase(),\n    password: action.data.password\n  };\n  console.log(credentials);\n  const requestURL = '/api/auth/signin';\n  const signin = yield call(request, requestURL, 'POST', credentials);\n  console.log('signin');\n  console.log(signin);\n\n  if (signin.success) {\n    const data = signin.data;\n    yield call(login, {\n      user: data.user,\n      jwt: data.token\n    }); //  yield call(registerForPushNotificationsAsync)\n\n    yield put(signinsuccess(data.user));\n  } else {\n    yield put(signinfailed(signin.message));\n  }\n}\n\nexport function* requestLogout(action) {\n  yield call(logout);\n  yield put(logoutDone());\n}\n\nfunction* requestRestoreSession(action) {\n  const session = yield call(currentSession);\n  console.log(session);\n  yield put(restoreSessionSuccess(session));\n}\n\nfunction* restoreSessionSaga() {\n  yield takeLatest(RESTORE_SESSION, requestRestoreSession);\n}\n\nfunction* signinSaga() {\n  yield takeLatest(SIGNIN, requestSignin);\n}\n\nfunction* logoutSaga() {\n  yield takeLatest(LOGOUT, requestLogout);\n}\n\nfunction* mainSaga() {\n  yield all([call(signinSaga), call(restoreSessionSaga), call(logoutSaga)]);\n}\n\nexport default mainSaga;","map":{"version":3,"sources":["/Users/nikhilbhatia/Documents/projects/nextRedux/redux/auth/saga.ts"],"names":["actions","signinsuccess","signinfailed","restoreSessionSuccess","logoutDone","call","put","all","takeLatest","request","login","logout","currentSession","SIGNIN","RESTORE_SESSION","LOGOUT","requestSignin","action","credentials","email","data","toLowerCase","password","console","log","requestURL","signin","success","user","jwt","token","message","requestLogout","requestRestoreSession","session","restoreSessionSaga","signinSaga","logoutSaga","mainSaga"],"mappings":"AAAA,SACIA,OADJ,QAUS,aAVT;AAYE,SACEC,aADF,EAEEC,YAFF,EAGEC,qBAHF,EAIEC,UAJF,QAKO,WALP;AAaA,SAASC,IAAT,EAAeC,GAAf,EAAoBC,GAApB,EAAyBC,UAAzB,QAAmD,oBAAnD;AAEA,OAAOC,OAAP,MAKK,YALL;AAMA,SAASC,KAAT,EAAgBC,MAAhB,EAAwBC,cAAxB,QAA0D,eAA1D;AAGA,MAAM;AACJC,EAAAA,MADI;AAGJC,EAAAA,eAHI;AAIJC,EAAAA;AAJI,IAKFf,OALJ;;AAOA,UAAUgB,aAAV,CAAwBC,MAAxB,EAA8C;AAC5C,QAAMC,WAA4B,GAAG;AACnCC,IAAAA,KAAK,EAAEF,MAAM,CAACG,IAAP,CAAYD,KAAZ,CAAkBE,WAAlB,EAD4B;AAEnCC,IAAAA,QAAQ,EAAEL,MAAM,CAACG,IAAP,CAAYE;AAFa,GAArC;AAIAC,EAAAA,OAAO,CAACC,GAAR,CAAYN,WAAZ;AACA,QAAMO,UAAU,GAAG,kBAAnB;AACA,QAAMC,MAAwC,GAAG,MAAMrB,IAAI,CACzDI,OADyD,EAEzDgB,UAFyD,EAGzD,MAHyD,EAIzDP,WAJyD,CAA3D;AAOAK,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYE,MAAZ;;AAEA,MAAIA,MAAM,CAACC,OAAX,EAAoB;AAClB,UAAMP,IAAI,GAAIM,MAAD,CAAyCN,IAAtD;AACA,UAAMf,IAAI,CAAeK,KAAf,EAAsB;AAC9BkB,MAAAA,IAAI,EAAER,IAAI,CAACQ,IADmB;AAE9BC,MAAAA,GAAG,EAAET,IAAI,CAACU;AAFoB,KAAtB,CAAV,CAFkB,CAMlB;;AACA,UAAMxB,GAAG,CAACL,aAAa,CAACmB,IAAI,CAACQ,IAAN,CAAd,CAAT;AACD,GARD,MAQO;AACL,UAAMtB,GAAG,CAACJ,YAAY,CAAEwB,MAAD,CAAwBK,OAAzB,CAAb,CAAT;AACD;AACF;;AAGD,OAAO,UAAUC,aAAV,CAAwBf,MAAxB,EAA8C;AACnD,QAAMZ,IAAI,CAACM,MAAD,CAAV;AACA,QAAML,GAAG,CAACF,UAAU,EAAX,CAAT;AACD;;AAED,UAAU6B,qBAAV,CAAgChB,MAAhC,EAA8D;AAC5D,QAAMiB,OAAO,GAAG,MAAM7B,IAAI,CAACO,cAAD,CAA1B;AACAW,EAAAA,OAAO,CAACC,GAAR,CAAYU,OAAZ;AAEA,QAAM5B,GAAG,CAACH,qBAAqB,CAAC+B,OAAD,CAAtB,CAAT;AACD;;AAED,UAAUC,kBAAV,GAA+B;AAC7B,QAAM3B,UAAU,CAACM,eAAD,EAAkBmB,qBAAlB,CAAhB;AACD;;AAED,UAAUG,UAAV,GAAuB;AACrB,QAAM5B,UAAU,CAACK,MAAD,EAASG,aAAT,CAAhB;AACD;;AAED,UAAUqB,UAAV,GAAuB;AACrB,QAAM7B,UAAU,CAACO,MAAD,EAASiB,aAAT,CAAhB;AACD;;AAGD,UAAUM,QAAV,GAAqB;AACnB,QAAM/B,GAAG,CAAC,CACRF,IAAI,CAAC+B,UAAD,CADI,EAER/B,IAAI,CAAC8B,kBAAD,CAFI,EAGR9B,IAAI,CAACgC,UAAD,CAHI,CAAD,CAAT;AAKD;;AAED,eAAeC,QAAf","sourcesContent":["import {\n    actions,\n    \n    \n    LogoutAction,\n    \n    RestoreSessionAction,\n    \n    SignInAction,\n    \n  } from './constants'\n  \n  import {\n    signinsuccess,\n    signinfailed,\n    restoreSessionSuccess,\n    logoutDone\n  } from './actions'\n  \n  import {\n    SignInVariables,\n    SignInResult,\n    \n  } from '../../apiTypes'\n  \n  import { call, put, all, takeLatest, select } from 'redux-saga/effects'\n  \n  import request, {\n    RequestReturnParam,\n    RequestSuccess,\n    RequestFail,\n    requestUploadImage,\n} from '../request'\n  import { login, logout, currentSession, removeCode } from './UserSession'\n  \n  \n  const {\n    SIGNIN,\n    \n    RESTORE_SESSION,\n    LOGOUT\n  } = actions\n  \n  function* requestSignin(action: SignInAction) {\n    const credentials: SignInVariables = {\n      email: action.data.email.toLowerCase(),\n      password: action.data.password,\n    }\n    console.log(credentials)\n    const requestURL = '/api/auth/signin'\n    const signin: RequestReturnParam<SignInResult> = yield call<typeof request>(\n      request,\n      requestURL,\n      'POST',\n      credentials\n    )\n  \n    console.log('signin')\n    console.log(signin)\n  \n    if (signin.success) {\n      const data = (signin as RequestSuccess<SignInResult>).data\n      yield call<typeof login>(login, {\n        user: data.user,\n        jwt: data.token,\n      })\n      //  yield call(registerForPushNotificationsAsync)\n      yield put(signinsuccess(data.user))\n    } else {\n      yield put(signinfailed((signin as RequestFail).message))\n    }\n  }\n  \n  \n  export function* requestLogout(action: LogoutAction) {\n    yield call(logout)\n    yield put(logoutDone())\n  }\n  \n  function* requestRestoreSession(action: RestoreSessionAction) {\n    const session = yield call(currentSession)\n    console.log(session)\n  \n    yield put(restoreSessionSuccess(session))\n  }\n  \n  function* restoreSessionSaga() {\n    yield takeLatest(RESTORE_SESSION, requestRestoreSession)\n  }\n  \n  function* signinSaga() {\n    yield takeLatest(SIGNIN, requestSignin)\n  }\n  \n  function* logoutSaga() {\n    yield takeLatest(LOGOUT, requestLogout)\n  }\n  \n  \n  function* mainSaga() {\n    yield all([\n      call(signinSaga),\n      call(restoreSessionSaga),\n      call(logoutSaga)\n    ])\n  }\n  \n  export default mainSaga\n  "]},"metadata":{},"sourceType":"module"}